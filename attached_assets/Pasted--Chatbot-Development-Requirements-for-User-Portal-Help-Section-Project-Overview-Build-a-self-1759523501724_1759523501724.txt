# Chatbot Development Requirements for User Portal Help Section

## Project Overview
Build a self-contained, intelligent chatbot for the Help section of our User Portal. This chatbot must be entirely self-hosted without relying on external API services (OpenAI, Dialogflow, etc.) to minimize costs.

## Core Functionality

### 1. Language Support
- Primary language: English
- Secondary language: Urdu/Roman Urdu
- Implement seamless language detection and switching based on user input

### 2. Personalization
- Retrieve and use the user's actual name from the database
- Personalize responses using the user's name naturally in conversation
- Access user context (account type, registration date, etc.) when relevant

### 3. Knowledge Base & Accuracy
- Only provide information that is verified and accurate
- For unknown queries, gracefully redirect users with: "I don't have information about that. Please visit our Contact section to message our support team directly."
- Never fabricate or guess information

## Critical Requirements

### Real-Time Knowledge Updates
Implement a dynamic system that allows the chatbot to:
- Automatically detect new features and updates added to the website after chatbot deployment
- Parse and understand new documentation, feature descriptions, and help content
- Update its knowledge base without manual retraining

**Suggested Implementation Approach:**
- Create a structured documentation system (JSON/YAML) for all features
- Implement a file-watching mechanism that detects changes to documentation
- Build a parsing system that converts new documentation into chatbot-understandable responses
- Version control for knowledge base updates
- Include timestamps for when information was last updated

### Security & Privacy Boundaries

**The chatbot MUST NOT provide information about:**
- Backend infrastructure details (server configurations, database schemas, API endpoints)
- Source code or technical implementation details
- Team member personal information (emails, phone numbers, addresses)
- Internal processes or business logic
- Security protocols or authentication mechanisms
- Admin panel access or credentials
- Financial or payment processing details

**The chatbot SHOULD provide information about:**
- User-facing features and how to use them
- Account management (password reset, profile updates)
- Navigation and UI guidance
- FAQ and common troubleshooting
- Feature availability and descriptions
- General policies (terms of service, privacy policy - high-level only)

## Technical Specifications

### Architecture
- Build using lightweight NLP libraries (consider: natural, compromise, or similar)
- Implement intent classification system
- Create entity extraction for user queries
- Design modular knowledge base structure for easy updates
- Implement conversation context management (remember previous messages in session)

### User Experience
- Conversational and friendly tone
- Quick response times (< 2 seconds)
- Clear, concise answers (avoid overly technical language)
- Provide actionable next steps
- Include conversation history during the session
- Add typing indicators for better UX

### Error Handling
- Graceful fallbacks for unrecognized queries
- Clear escalation path to human support
- Log unknown queries for future knowledge base improvements

## Development Phases

1. **Phase 1:** Basic intent recognition and static knowledge base
2. **Phase 2:** Database integration for user personalization
3. **Phase 3:** Dynamic knowledge base updates system
4. **Phase 4:** Bilingual support implementation
5. **Phase 5:** Testing, refinement, and security audit

## Success Metrics
- Accurately answers at least 80% of common help queries
- Successfully redirects unknown queries without confusion
- Maintains security boundaries 100% of the time
- Updates knowledge base within 5 minutes of documentation changes
- Responds in under 2 seconds for 95% of queries

---

## Changes Made & Rationale

### What I Changed:

1. **Structure & Organization**
   - Divided into clear sections with headers
   - Added numbered/bulleted lists for clarity
   - Created logical flow from overview → requirements → technical specs

2. **Language & Tone**
   - Removed informal language ("ye wali zuban bhi bol saqta ho" → "Urdu/Roman Urdu")
   - Eliminated all caps text (looks unprofessional)
   - Changed vague phrases to specific requirements

3. **Technical Clarity**
   - Specified the "real-time updates" requirement with concrete implementation suggestions
   - Added detailed security boundaries with clear DO/DON'T lists
   - Included technical architecture recommendations

4. **Actionable Details**
   - Added development phases for systematic implementation
   - Included success metrics for measurable outcomes
   - Provided specific response time requirements
   - Suggested actual NLP libraries to use

5. **Completeness**
   - Added error handling section
   - Included UX considerations
   - Specified bilingual implementation as a clear requirement
   - Added conversation context management

### Why These Changes Matter:

- **For the AI Assistant:** Clear, structured requirements reduce ambiguity and help generate better code
- **For Development:** Phased approach makes the project manageable
- **For Maintenance:** Modular structure and documentation system enable future updates
- **For Security:** Explicit boundaries prevent accidental data leaks
- **For Users:** Defined UX requirements ensure a polished experience

The original prompt had good ideas but lacked structure and specificity. This version gives Replit's AI Assistant everything needed to build a production-ready chatbot.