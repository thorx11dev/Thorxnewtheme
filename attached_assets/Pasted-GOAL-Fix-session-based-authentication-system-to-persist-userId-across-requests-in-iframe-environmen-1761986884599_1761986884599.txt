GOAL
Fix session-based authentication system to persist userId across requests in iframe environments (Replit). Ensure new projects with GitHub imports work reliably with database and session authentication.

TECHNICAL SPECIFICATIONS
Environment:

Express.js backend with express-session + connect-pg-simple
PostgreSQL database
Session cookies: sameSite: "none", secure: true, httpOnly: true
React frontend with React Query
Running on Replit (iframe environment)
Current Issue:

Sessions create successfully but userId becomes undefined on subsequent requests
Session ID changes on each request despite successful login/register
cookieHeader: false indicates cookies not being sent from client
STEP-BY-STEP ACTIONS
1. Fix Client-Side Credential Handling
File: client/src/lib/queryClient.ts

Update getQueryFn to explicitly include credentials in ALL requests:

export const getQueryFn: <T>(options: {
  on401: UnauthorizedBehavior;
}) => QueryFunction<T> =
  ({ on401: unauthorizedBehavior }) =>
  async ({ queryKey }) => {
    const res = await fetch(queryKey.join("/") as string, {
      credentials: "include",
      headers: {
        "Accept": "application/json",
      },
    });
    if (unauthorizedBehavior === "returnNull" && res.status === 401) {
      return null;
    }
    await throwIfResNotOk(res);
    return await res.json();
  };
2. Verify CORS Configuration
File: server/index.ts

Ensure CORS allows credentials and includes current Replit domain:

const allowedOrigins = [
  'http://localhost:5000',
  'https://localhost:5000',
  'http://127.0.0.1:5000',
  'https://127.0.0.1:5000',
  ...(process.env.REPLIT_DEV_DOMAIN ? [
    `https://${process.env.REPLIT_DEV_DOMAIN}`,
    `http://${process.env.REPLIT_DEV_DOMAIN}`
  ] : []),
  ...(process.env.REPL_SLUG && process.env.REPL_OWNER ? [
    `https://${process.env.REPL_SLUG}.${process.env.REPL_OWNER}.repl.co`,
    `http://${process.env.REPL_SLUG}.${process.env.REPL_OWNER}.repl.co`
  ] : []),
];
app.use(cors({
  origin: (origin, callback) => {
    if (!origin) return callback(null, true);
    if (allowedOrigins.some(allowed => origin.startsWith(allowed))) {
      callback(null, true);
    } else {
      console.warn(`CORS blocked: ${origin}`);
      callback(null, false);
    }
  },
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization'],
  exposedHeaders: ['Set-Cookie'],
}));
3. Add Session Debugging Middleware
File: server/routes.ts

Add after session setup:

app.use((req, res, next) => {
  console.log('Session Debug:', {
    path: req.path,
    sessionID: req.sessionID,
    userId: req.session?.userId,
    cookie: req.headers.cookie?.substring(0, 50),
  });
  next();
});
4. Ensure Session Persistence
File: server/routes.ts

Verify session config has proper store initialization:

const sessionConfig = {
  store: new pgStore({
    conString: process.env.DATABASE_URL,
    createTableIfMissing: true,
    ttl: sessionTtl,
    pruneSessionInterval: 60 * 60, // 1 hour
  }),
  secret: process.env.SESSION_SECRET || "thorx-secret-key-dev-only",
  resave: false,
  saveUninitialized: false, // Changed to false - only save sessions with data
  rolling: true, // Reset cookie expiry on each request
  cookie: {
    httpOnly: true,
    secure: isReplit || process.env.NODE_ENV === "production",
    maxAge: sessionTtl,
    sameSite: isReplit ? "none" as const : "lax" as const,
    domain: undefined,
  },
  name: 'thorx.sid', // Custom session cookie name
};
5. GitHub Import Setup Guide
Create .replit configuration:

run = "npm run dev"
entrypoint = "server/index.ts"
[deployment]
run = ["npm", "run", "build", "&&", "npm", "run", "start"]
deploymentTarget = "autoscale"
build = ["npm", "run", "build"]
VALIDATION CRITERIA
‚úÖ Success Indicators:
Registration Flow:

User registers ‚Üí userId persists in session
Next request shows cookieHeader: true
/api/user returns user data (not 401)
Login Flow:

User logs in ‚Üí userId persists
Session ID stays consistent across requests
Console shows: Session Debug: { userId: '<uuid>', cookie: 'thorx.sid=...' }
GitHub Import:

Clone repository to new Repl
Add Secrets: DATABASE_URL, SESSION_SECRET
Run npm install && npm run db:push
Start app ‚Üí authentication works immediately
üîç Test Commands:
# Test session persistence
curl -c cookies.txt -X POST http://localhost:5000/api/register \
  -H "Content-Type: application/json" \
  -d '{"email":"test@example.com","password":"Test1234","firstName":"Test","lastName":"User"}'
curl -b cookies.txt http://localhost:5000/api/user
# Should return user data, not 401
üìä Console Output Should Show:
Session saved: { userId: '<uuid>', sessionId: '<sid>', hasUser: true }
Session Debug: { path: '/api/user', sessionID: '<sid>', userId: '<uuid>', cookie: 'thorx.sid=...' }
GET /api/user 200 in 5ms
EXECUTION ORDER
Fix queryClient.ts (credentials)
Verify CORS in index.ts
Update session config in routes.ts
Add debug middleware
Test with new registration
Validate with curl commands
Document in SETUP_NEW_ACCOUNT.md