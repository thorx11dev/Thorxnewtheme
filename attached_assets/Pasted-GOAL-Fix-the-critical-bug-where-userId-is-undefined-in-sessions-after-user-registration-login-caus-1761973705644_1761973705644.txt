GOAL
Fix the critical bug where userId is undefined in sessions after user registration/login, causing all authenticated requests to fail with 401 errors.

PROBLEM ANALYSIS
Console shows:

Session check: { sessionExists: true, userId: undefined, sessionId: <id> }
No userId in session, returning 401
Root Cause: session.save() is not reliably persisting session data to PostgreSQL. The session.regenerate() approach in the previous fix was correct but incomplete.

TECHNICAL SPECIFICATIONS
Stack: Express.js, express-session, connect-pg-simple, PostgreSQL
Session Store: PostgreSQL (connect-pg-simple)
Cookie Settings: sameSite: 'none', secure: true (Replit iframe environment)
Files to Modify: server/routes.ts (registration and login endpoints only)
REQUIRED ACTIONS
Step 1: Update /api/register endpoint in server/routes.ts

Remove the current session.regenerate() block (lines with regenerate logic)
Replace with explicit session data setting followed by promisified session.save()
Ensure session data is set AFTER save completes, not before
Add comprehensive error logging
Step 2: Update /api/login endpoint in server/routes.ts

Apply identical fix pattern as registration
Ensure consistency between both endpoints
Step 3: Add session debugging

Log session data immediately after save
Log the actual PostgreSQL session record (if possible)
IMPLEMENTATION PATTERN
// CORRECT PATTERN (to be applied):
// 1. Create/validate user first
const user = await storage.createUser(data); // or validateUserPassword()
// 2. Set session data
req.session.userId = user.id;
req.session.user = {
  id: user.id,
  email: user.email,
  firstName: user.firstName,
  lastName: user.lastName,
  role: user.role || 'user'
};
// 3. Force save with explicit promise
await new Promise<void>((resolve, reject) => {
  req.session.save((err) => {
    if (err) {
      console.error("Session save error:", err);
      return reject(err);
    }
    
    // 4. Verify data was set
    console.log("Session saved:", {
      userId: req.session.userId,
      sessionId: req.session.id,
      hasUser: !!req.session.user
    });
    
    resolve();
  });
});
// 5. Reload session to verify persistence
await new Promise<void>((resolve, reject) => {
  req.session.reload((err) => {
    if (err) {
      console.error("Session reload error:", err);
      return reject(err);
    }
    
    console.log("Session after reload:", {
      userId: req.session.userId,
      sessionId: req.session.id
    });
    
    resolve();
  });
});
VALIDATION CRITERIA
After registration, console shows: Session saved: { userId: <actual-id>, sessionId: <id>, hasUser: true }
After reload, console shows: Session after reload: { userId: <same-id>, sessionId: <same-id> }
Subsequent /api/user request returns user data (not 401)
User is redirected to portal successfully
No 401 errors in console after authentication
CONSTRAINTS
Do NOT modify session configuration in server/index.ts
Do NOT change CORS settings
Do NOT modify cookie settings
ONLY modify the registration and login endpoints
Maintain all existing error handling
Keep response format unchanged
OUTPUT FORMAT
Provide:

Complete updated /api/register endpoint code
Complete updated /api/login endpoint code
Brief explanation of what changed and why