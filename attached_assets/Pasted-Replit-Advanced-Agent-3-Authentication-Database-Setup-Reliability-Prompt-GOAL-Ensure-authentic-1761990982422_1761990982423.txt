Replit Advanced Agent 3 - Authentication & Database Setup Reliability Prompt
GOAL: Ensure authentication and database systems work reliably across all scenarios: new Replit project creation, GitHub import, and secret configuration (DATABASE_URL, SESSION_SECRET).

Technical Specifications
Stack:

Node.js/TypeScript/Express backend
PostgreSQL database with Drizzle ORM
Session-based authentication with express-session + connect-pg-simple
Replit PostgreSQL database provisioning
Environment variables: DATABASE_URL, SESSION_SECRET
Critical Components:

scripts/auto-setup.js - Automated database migration runner
server/routes.ts - Session configuration and authentication middleware
drizzle.config.ts - Database connection config
package.json - postinstall hook for auto-setup
Step-by-Step Actions
1. Verify Auto-Setup Script Reliability
File: scripts/auto-setup.js

Requirements:

Detect DATABASE_URL presence
Auto-generate SESSION_SECRET if missing (with clear console instructions)
Run Drizzle migrations automatically when DATABASE_URL exists
Provide actionable error messages for missing dependencies
Exit gracefully with clear next steps if database not provisioned
Validation:

# Test without DATABASE_URL
unset DATABASE_URL && node scripts/auto-setup.js
# Expected: Clear instructions to provision PostgreSQL
# Test with DATABASE_URL
node scripts/auto-setup.js
# Expected: Migrations run successfully
2. Ensure Session Configuration Handles Replit Environment
File: server/routes.ts

Critical Session Config:

const sessionConfig = {
  store: new pgStore({
    conString: process.env.DATABASE_URL,
    createTableIfMissing: true,
    ttl: 7 * 24 * 60 * 60 * 1000,
  }),
  secret: process.env.SESSION_SECRET || crypto.randomBytes(32).toString('hex'),
  resave: false,
  saveUninitialized: false,
  rolling: true,
  cookie: {
    httpOnly: true,
    secure: process.env.NODE_ENV === "production",
    maxAge: 7 * 24 * 60 * 60 * 1000,
    sameSite: "lax" as const,
  },
  name: 'thorx.sid',
};
app.set('trust proxy', 1);
Fix Required Issues:

Session persistence across requests
userId undefined after login/registration
Cookie handling in Replit iframe environment
Validation:

Register new user → Check userId in session
Login → Verify session persists across API calls
/api/user endpoint returns user data (not 401)
3. Standardize Database Migration Process
File: package.json

Add/Verify Scripts:

{
  "scripts": {
    "setup": "node scripts/auto-setup.js",
    "postinstall": "node scripts/auto-setup.js || echo 'Setup will run when DATABASE_URL is available'",
    "db:push": "drizzle-kit push",
    "db:migrate": "drizzle-kit migrate"
  }
}
Validation:

npm run setup
# Expected: Database tables created, no errors
4. Create Comprehensive Setup Documentation
File: SETUP_NEW_ACCOUNT.md (already exists - verify completeness)

Required Sections:

Automatic Setup - What happens on import
Manual Steps - Database provisioning, secrets setup
Troubleshooting - Common errors and solutions
Verification Checklist - Test authentication flow
Validation:

Follow documentation from scratch in new Replit account
Document should be complete and accurate
5. Fix Authentication Session Persistence Bug
Current Issue: userId is undefined in session after login/registration

Root Cause Analysis:

Check req.session.save() completion in /api/register and /api/login
Verify session store connection to PostgreSQL
Confirm cookie is being set and sent with subsequent requests
Required Fix in server/routes.ts:

// After user creation/login
req.session.userId = user.id;
req.session.user = {
  id: user.id,
  email: user.email,
  firstName: user.firstName,
  lastName: user.lastName,
  role: user.role || 'user'
};
// Force save with explicit promise
await new Promise<void>((resolve, reject) => {
  req.session.save((err) => {
    if (err) {
      console.error("Session save error:", err);
      return reject(err);
    }
    console.log("Session saved:", req.session.userId);
    resolve();
  });
});
// Verify persistence
await new Promise<void>((resolve, reject) => {
  req.session.reload((err) => {
    if (err) return reject(err);
    console.log("Session after reload:", req.session.userId);
    resolve();
  });
});
Validation:

# Console logs should show:
# "Session saved: <user_id>"
# "Session after reload: <user_id>"
# No "userId: undefined" in subsequent requests
6. Environment Variable Management
Create: .env.example (for reference)

DATABASE_URL=postgresql://user:pass@host:5432/db
SESSION_SECRET=your-64-char-random-hex-string
PORT=5000
NODE_ENV=development
Replit Secrets Setup Guide:

Tools → Secrets
Add DATABASE_URL (auto-set by PostgreSQL tool)
Add SESSION_SECRET:
node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
Validation:

Secrets visible in Replit Secrets tool
Environment variables accessible in Node.js (process.env.DATABASE_URL)
7. Test Complete Import Workflow
Scenario: Fresh Replit account importing from GitHub

Test Steps:

Import project from GitHub URL
Wait for dependencies to install
Check console for postinstall script output
Provision PostgreSQL database (Tools → Database → Create)
Add SESSION_SECRET in Secrets
Click Run button
Test authentication flow:
Register new account
Login
Access /api/user endpoint
Verify dashboard loads
Expected Results:

✅ No manual migration commands required
✅ Tables created automatically
✅ Sessions persist across requests
✅ userId populated in session
✅ Authentication works end-to-end
Validation Criteria
✅ Database Setup
 Migrations run automatically on first launch with DATABASE_URL
 All tables from shared/schema.ts exist in database
 Connection pool handles concurrent requests
✅ Session Management
 Sessions persist across page reloads
 userId is defined after login/registration
 /api/user returns 200 with user data (not 401)
 Cookies set correctly (check browser DevTools)
✅ Error Handling
 Clear error messages if DATABASE_URL missing
 Instructions displayed for missing SESSION_SECRET
 Graceful degradation if database unreachable
✅ GitHub Import
 Clone project → Automatic dependency install
 Provision database → Auto-migrate
 Add secrets → Restart → Works immediately
✅ Documentation
 SETUP_NEW_ACCOUNT.md complete and accurate
 Troubleshooting section covers common errors
 Quick start checklist provided
Execution Checklist
 Review and fix scripts/auto-setup.js
 Update session configuration in server/routes.ts
 Add explicit session save/reload promises in auth endpoints
 Verify postinstall script in package.json
 Test complete workflow in new Replit account
 Update documentation with findings
 Validate all 5 criteria above are met