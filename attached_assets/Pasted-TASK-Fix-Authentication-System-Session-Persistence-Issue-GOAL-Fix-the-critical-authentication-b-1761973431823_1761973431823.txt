TASK: Fix Authentication System - Session Persistence Issue
GOAL
Fix the critical authentication bug where users can register/login but sessions don't persist because userId is undefined in subsequent requests, causing all authenticated endpoints to return 401 errors.

PROBLEM ANALYSIS
From console logs:

Session check: { sessionExists: true , userId: undefined , sessionId: gJ5lVTe8UdkWJrKXVy-XLsrHtR-zx1Uv , cookieHeader: false , user: undefined }
No userId in session, returning 401
Root Causes:

Session cookies are created but req.session.userId is undefined in subsequent requests
Frontend is NOT sending credentials (cookies) with API requests
Session data is not being properly saved after registration/login
REQUIRED FIXES
Fix 1: Enable Credentials in Frontend API Requests
File: client/src/lib/queryClient.ts

Action: Ensure credentials: "include" is set in BOTH apiRequest function AND getQueryFn function.

Current State: The code has credentials: "include" but may not be consistent across all fetch calls.

Required Changes:

Verify apiRequest() has credentials: "include" in fetch options
Verify getQueryFn() has credentials: "include" in fetch options
Both functions MUST send cookies with every request
Fix 2: Verify Session Saving in Backend Routes
File: server/routes.ts

Action: Ensure session is explicitly saved after setting userId in registration and login endpoints.

Critical Code Sections:

Registration endpoint (/api/register) - Line ~948:

After creating user, set req.session.userId = newUser.id
Call req.session.save() with error handling
Wait for save to complete before sending response
Login endpoint (/api/login) - Line ~1012:

After validating user, set req.session.userId = user.id
Call req.session.save() with error handling
Wait for save to complete before sending response
Example Pattern (already in code, verify it's working):

req.session.userId = user.id;
await new Promise<void>((resolve, reject) => {
  req.session.save((err) => {
    if (err) reject(err);
    else resolve();
  });
});
Fix 3: Verify CORS Configuration
File: server/index.ts

Action: Ensure CORS is properly configured to allow credentials.

Required Settings:

credentials: true ✓ (already present)
Origin validation includes Replit domains ✓ (already present)
exposedHeaders: ['Set-Cookie'] ✓ (already present)
VALIDATION STEPS
After implementing fixes, verify:

Registration Flow:

Register new user
Check console logs: sessionId should have a value
Check console logs: userId should have a value (not undefined)
Verify redirect to portal works
Login Flow:

Login with existing user
Check console logs: userId should match user's ID
Verify /api/user endpoint returns user data (not 401)
Session Persistence:

After login, refresh page
Check console logs: userId should still be present
Verify user stays logged in (not redirected to auth page)
Cookie Verification:

Open browser DevTools → Application/Storage → Cookies
Verify connect.sid cookie exists
Verify cookie has SameSite=None and Secure=true flags
EXPECTED CONSOLE OUTPUT (After Fix)
Session check: { sessionExists: true , userId: "actual-user-id-here" , sessionId: "session-id-here" , cookieHeader: true , user: {...} }
User found, returning user data for: user@email.com
DELIVERABLES
Updated client/src/lib/queryClient.ts with verified credential settings
Updated server/routes.ts with verified session save logic
Confirmation that all validation steps pass
Console logs showing successful session persistence