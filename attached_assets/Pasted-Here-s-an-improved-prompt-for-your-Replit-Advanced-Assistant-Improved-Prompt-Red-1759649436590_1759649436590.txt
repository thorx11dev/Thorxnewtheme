Here's an improved prompt for your Replit Advanced Assistant:

---

**Improved Prompt:**

"Redesign the pie chart component on the User Portal Dashboard to improve visual design and align with the website's established design system.

**Current chart location:**
- Page: User Portal Dashboard
- Component: [Specify exact section - e.g., "Earnings Breakdown card" or "Referral Statistics widget"]
- Current library/implementation: [Specify if known - e.g., Chart.js, Recharts, custom SVG]

**Design requirements:**

1. **Color scheme:**
   - Primary: #FF6B35 (orange)
   - Accent: #000000 (black)
   - Background: #E8DCC4 (beige)
   - Neutral: #FFFFFF (white)
   - Use these colors for chart segments with sufficient contrast

2. **Visual style:**
   - Apply 2-3px solid black borders consistent with existing cards
   - Minimize chart decorations (remove unnecessary gridlines, shadows, or 3D effects)
   - Use clean, sans-serif typography matching the site font
   - Ensure proper spacing within the container

3. **Data visualization:**
   - Include percentage labels directly on segments (if space permits) or in a legend
   - Limit to 5-6 segments maximum for clarity
   - Use a muted color for segments with <5% data to maintain focus
   - Add hover states showing exact values

4. **Responsiveness:**
   - Desktop: Full-size chart with all labels visible
   - Tablet: Scaled appropriately with readable text
   - Mobile: Do NOT modify (preserve existing mobile layout)

**Accessibility:**
   - Ensure WCAG AA contrast ratios between segment colors
   - Add `aria-label` attributes for screen readers
   - Include a data table fallback for accessibility

**Implementation constraints:**
- Use existing charting library already in the project
- Do NOT introduce new dependencies
- Maintain current data fetching logic
- Preserve all interactive functionality

**Deliverable:**
Provide updated code for the chart component only, with comments explaining design choices."

---

## What I Changed and Why:

### 1. **Required specification of chart location**
   - **Before:** Assumed location is known
   - **After:** Asks user to specify exact section and current implementation
   - **Why:** "Dashboard" could contain multiple visualizations. Without knowing which chart or even if one exists, the AI cannot provide accurate modifications.

### 2. **Replaced subjective terms with measurable criteria**
   - **Before:** "minimal and attractive and user friendly"
   - **After:** Specific design rules like "remove unnecessary gridlines," "limit to 5-6 segments," "add hover states"
   - **Why:** "Attractive" means different things to different people. Concrete specifications produce consistent results.

### 3. **Provided exact design tokens**
   - **Before:** "website theme design and standards"
   - **After:** Specific hex codes, border widths, and typography references
   - **Why:** Generic references to "theme" don't help. Actual color values from the site ensure perfect consistency.

### 4. **Added accessibility requirements**
   - **Before:** Only mentioned "user friendly"
   - **After:** WCAG contrast ratios, aria-labels, screen reader support
   - **Why:** True user-friendliness includes accessibility. These are non-negotiable for professional web applications.

### 5. **Structured with clear sections**
   - **Before:** Single sentence with multiple vague requests
   - **After:** Organized into location, design, accessibility, constraints, and deliverable sections
   - **Why:** Structured prompts help AI parse requirements systematically and reduce oversight.

### 6. **Specified technical constraints**
   - **Added:** "Use existing charting library," "Do NOT introduce new dependencies"
   - **Why:** Prevents the AI from suggesting solutions requiring new installations that may conflict with the existing stack.

### 7. **Included responsive behavior**
   - **Before:** No mention of different screen sizes
   - **After:** Explicit desktop/tablet/mobile requirements
   - **Why:** Charts often need different treatments across breakpoints. Clarifying that mobile should remain unchanged prevents unwanted modifications.

### 8. **Added data visualization best practices**
   - **Added:** Segment limits, muted colors for small data, hover states
   - **Why:** These are industry standards that genuinely improve usability, moving beyond aesthetic preferences.

### 9. **Defined clear deliverable**
   - **Before:** Implied AI should just "make it better"
   - **After:** "Provide updated code for the chart component only, with comments"
   - **Why:** Scopes the response to prevent the AI from modifying unrelated code or providing only high-level suggestions.

### 10. **Made it conditional on user input**
   - **Added:** Placeholders for user to specify current implementation
   - **Why:** Without knowing what charting library is being used, the AI cannot provide syntactically correct code.

This rewritten prompt requires the user to provide missing information first, then gives the AI precise, actionable specifications that will result in professional, accessible chart improvements aligned with the site's existing design system.