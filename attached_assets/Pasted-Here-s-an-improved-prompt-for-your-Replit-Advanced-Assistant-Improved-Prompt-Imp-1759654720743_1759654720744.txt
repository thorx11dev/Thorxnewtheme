Here's an improved prompt for your Replit Advanced Assistant:

---

**Improved Prompt:**

"Implement enhanced client-side and server-side validation for email and phone number fields during user registration.

**Email Validation Requirements:**

1. **Syntax validation:**
   - RFC 5322 compliant format check
   - Block common typos (e.g., @gmial.com, @yahooo.com)
   - Require valid TLD from approved list

2. **Disposable email detection:**
   - Maintain a local blocklist of known disposable email domains (10minutemail, guerrillamail, tempmail, etc.)
   - Implement pattern matching for common disposable email formats (random-string@domain.com)
   - Check for plus-addressing abuse (user+spam@domain.com) if policy requires

3. **Additional checks:**
   - Verify domain has valid MX records (DNS lookup server-side)
   - Detect role-based addresses if needed (admin@, noreply@, support@)

**Phone Number Validation Requirements:**

1. **Pakistani phone number validation:**
   - Format: +92-3XX-XXXXXXX or 03XX-XXXXXXX
   - Validate operator prefixes: 300-305, 310-312, 313-318, 320-324, 330-336, 340-347, 355, 370
   - Reject invalid prefixes and incorrect digit counts
   - Normalize input to consistent format before storage

2. **Field behavior:**
   - Phone field is optional
   - Display tooltip text "(Optional)" on hover over the info icon
   - Apply validation only when user provides input

**Error Message Standards:**

- **Invalid email format:** "Please enter a valid email address"
- **Disposable email detected:** "Temporary email addresses are not allowed"
- **Invalid phone format:** "Enter a valid Pakistani mobile number (03XX-XXXXXXX)"
- **Invalid operator prefix:** "This mobile number prefix is not recognized"

**Error message styling:**
- Red text (#DC2626 or similar)
- Display below the input field
- 12-14px font size
- Clear after user modifies input

**Implementation approach:**

1. **Client-side (immediate feedback):**
   - Real-time format validation as user types
   - Basic disposable domain check using local array
   - Regex pattern matching for phone numbers

2. **Server-side (on form submission):**
   - Comprehensive disposable email domain check
   - MX record verification for email
   - Phone number format and prefix validation
   - Rate limiting to prevent automated abuse

**Technical constraints:**
- No external API calls (implement all logic in-house)
- Use Node.js built-in `dns` module for MX lookups
- Maintain disposable email domain list as a JSON file or database table
- Update blocklist periodically through manual review

**Files to modify:**
- Frontend validation: [specify form component file]
- Backend validation: [specify API route file]
- Error message component: [specify error display component]

**Deliverable:**
Provide complete validation code for both client and server, the disposable email domains list (minimum 50 domains), and Pakistani operator prefix validation array."

---

## What I Changed and Why:

### 1. **Split vague request into concrete technical specifications**
   - **Before:** "more advanced and secure"
   - **After:** Specific checks like "RFC 5322 format," "MX record verification," "operator prefix validation"
   - **Why:** "Advanced and secure" is subjective. Breaking it into actual validation techniques gives actionable requirements.

### 2. **Clarified the "no external API" constraint**
   - **Before:** "i dont want to use external API services or things"
   - **After:** "No external API calls (implement all logic in-house)" + "Use Node.js built-in `dns` module"
   - **Why:** Specifies that built-in modules are acceptable while third-party services aren't, and suggests the appropriate tool.

### 3. **Provided specific Pakistani phone formats**
   - **Before:** "valid Pakistani phone numbers"
   - **After:** Listed actual operator prefixes (300-305, 310-312, etc.) and format patterns
   - **Why:** "Valid" is undefined without knowing the actual numbering plan. Real prefixes ensure accurate validation.

### 4. **Defined exact error messages**
   - **Before:** "concise and follow strict standards"
   - **After:** Listed specific error text for each scenario
   - **Why:** "Concise" is relative. Providing actual messages ensures consistency and saves decision-making time.

### 5. **Added styling specifications for errors**
   - **Before:** "follow strict standards and designs"
   - **After:** Color codes, positioning, font sizes, and behavior specifications
   - **Why:** "Standards and designs" doesn't indicate what those are. Concrete styling rules ensure visual consistency.

### 6. **Separated client-side vs server-side validation**
   - **Before:** No distinction made
   - **After:** Clear sections for immediate feedback vs. submission validation
   - **Why:** Both layers are needed for security. Client-side improves UX, server-side prevents bypass.

### 7. **Specified implementation approach**
   - **Before:** "do it by your own"
   - **After:** Specific techniques like "maintain blocklist as JSON file," "use regex patterns," "implement rate limiting"
   - **Why:** Guides the AI toward maintainable solutions rather than ad-hoc implementations.

### 8. **Added disposable email detection strategy**
   - **Before:** "temporary emails from different websites"
   - **After:** Three-pronged approach: blocklist, pattern matching, plus-addressing detection
   - **Why:** No single method catches all disposable emails. Multiple strategies improve effectiveness.

### 9. **Clarified tooltip behavior**
   - **Before:** "should display the text '(Optional)' when hovered over"
   - **After:** "Display tooltip text '(Optional)' on hover over the info icon"
   - **Why:** Specifies it's a tooltip on an icon, not changing the field label itself.

### 10. **Requested specific deliverables**
   - **Before:** Implied general implementation
   - **After:** "Complete validation code...disposable email domains list (minimum 50 domains)...operator prefix array"
   - **Why:** Defines what files/data the AI should provide, preventing incomplete responses.

### 11. **Added maintainability considerations**
   - **Added:** "Update blocklist periodically through manual review"
   - **Why:** Disposable email services appear constantly. Acknowledges this requires ongoing maintenance.

### 12. **Included security measures beyond validation**
   - **Added:** "Rate limiting to prevent automated abuse"
   - **Why:** Even with validation, automated bots can flood registration. Rate limiting is a crucial security layer.

### 13. **Removed informal language**
   - **Before:** "i want you to do it by your own and i dont want"
   - **After:** Professional, direct instructions
   - **Why:** Formal language is clearer and prevents misinterpretation in technical contexts.

This rewritten prompt transforms a vague request into a comprehensive technical specification with measurable acceptance criteria, specific implementation guidance, and clear security objectivesâ€”all while respecting the "no external API" constraint.